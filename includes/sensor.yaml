#- platform: huesensor
- platform: google_travel_time
  name: distance_erik
  api_key: !secret google_api_key
  origin: person.erik
  destination: zone.home
- platform: google_travel_time
  name: distance_nathalie
  api_key: !secret google_api_key
  origin: person.nathalie
  destination: zone.home

- platform: p2000
  name: Veldhoven e.o.
  regios: 22
  disciplines: 1,2,3,4
  radius: 2000
  scan_interval: 20
  latitude: 51.426948
  longitude: 5.423349
  nolocation: true
  contains: Veldhoven

- platform: template
  sensors:
    # picnic_delivery_available_times:
    #   friendly_name: "Picnic mogelijkheden"
    #   value_template: >-
    #     {% for timeslot in state_attr('sensor.picnic_delivery_time_slots', 'time_slots') -%}
    #       {% if timeslot.is_available == true -%}    
    #         {{
    #           as_timestamp(timeslot.window_start) | timestamp_custom('%a %b %d, %H:%M') 
    #           + ' - ' 
    #           + as_timestamp(timeslot.window_end) | timestamp_custom('%H:%M') 
    #         }}     
    #       {% endif -%}
    #       {% endfor %}
    picnic_next_delivery_formatted:
      friendly_name: "Picnic Volgende levering"
      value_template: >-
        {% if states('sensor.picnic_selected_slot_start') != 'unavailable' %}
          "{{ 
          as_timestamp(states('sensor.picnic_selected_slot_start'))
          | timestamp_custom('%a %b %d, %H:%M') 
          + ' - ' 
          + as_timestamp(states('sensor.picnic_selected_slot_end')) 
          | timestamp_custom('%H:%M') 
          }}"
        {% else %}
          Geen datum opgegeven
        {% endif %}
      icon_template: mdi:truck-delivery

- platform: template
  sensors:
      rolluik_status:
        friendly_name: "Rolluik status"
        value_template: "{% if is_state('cover.neo_coolcam_roller_shutter_curtain_switch', 'open') %}Ingerold{% else %}Uitgerold{% endif %}"
        icon_template: "{% if is_state('cover.neo_coolcam_roller_shutter_curtain_switch', 'open') %}mdi:blinds-open{% else %}mdi:blinds{% endif %}"

- platform: dsmr
  port: /dev/serial/by-id/usb-FTDI_FT232R_USB_UART_AD3Z7YJM-if00-port0
  dsmr_version: 5

- platform: buienalarm
  timeframe: 15
  name: buienalarm
  monitored_conditions:
    - temperature
    - precipitation
    - precipitation_forecast_average
    - precipitation_forecast_total
    - next_rain_forecast

#   # Example configuration.yaml entry
# - platform: buienradar
#   name: "Eindhoven"
#   # Force 'Meetstation Eindhoven' to be used:
#   latitude: 51.45
#   longitude: 5.42
#   monitored_conditions:
#     - stationname
#     - conditioncode
#     - condition
#     - conditiondetailed
#     - conditionexact
#     - symbol
#     - humidity
#     - temperature
#     - groundtemperature
#     - windspeed
#     - windforce
#     - winddirection
#     - windazimuth
#     - pressure
#     - visibility
#     - windgust
#     - precipitation
#     - irradiance
#     - precipitation_forecast_average
#     - precipitation_forecast_total
#     # conditions for forecasted data:
#     - symbol_1d
#     - symbol_2d
#     - symbol_3d
#     - symbol_4d
#     - symbol_5d
#     - temperature_1d
#     - temperature_2d
#     - temperature_3d
#     - temperature_4d
#     - temperature_5d
#     - rainchance_1d
#     - rainchance_2d
#     - rainchance_3d
#     - rainchance_4d
#     - rainchance_5d
#     - sunchance_1d
#     - sunchance_2d
#     - sunchance_3d
#     - sunchance_4d
#     - sunchance_5d
#     - rain_1d
#     - rain_2d
#     - rain_3d
#     - rain_4d
#     - rain_5d

- platform: darksky
  api_key: !secret darksky_api
  name: Weather
  language: nl
  monitored_conditions:
    - summary
    #      - icon
    #      - nearest_storm_distance
    #      - nearest_storm_bearing
    #      - precip_type
    - precip_intensity
    - precip_probability
    - temperature
    - apparent_temperature
    #      - dew_point
    #      - wind_speed
    #      - wind_bearing
    - cloud_cover
    - humidity
    - pressure
    - visibility
    #      - ozone
    #      - minutely_summary
    - hourly_summary
    - daily_summary
    - precip_intensity_max

- platform: scrape
  resource: https://www.knmi.nl/nederland-nu/weer/waarschuwingen/noord-brabant
  select: "a.alert__description"
  name: knmi_alert_description
  scan_interval: 300
- platform: scrape
  resource: https://www.knmi.nl/nederland-nu/weer/waarschuwingen/noord-brabant
  select: "div.alert__heading"
  name: knmi_waarschuwing
  scan_interval: 300

- platform: rest
  resource: !secret genie_resource
  method: GET
  name: Genie Geur Status
  value_template: "{{ value_json.hub.sensors.fillc.title }}"

- platform: rest
  resource: !secret genie_resource
  method: GET
  name: Genie Batterij Status
  value_template: "{{ value_json.hub.sensors.battc.title }}"

- platform: rest
  resource: !secret genie_resource
  method: GET
  name: Genie Wifi Status
  value_template: "{{ value_json.hub.sensors.wific.title }}"

- platform: rest
  resource: !secret genie_resource
  method: GET
  name: Genie Geur
  value_template: "{{ value_json.hub.sensors.rfidc.title }}"

- platform: rest
  resource: !secret genie_resource
  method: GET
  name: Genie Sterkte
  value_template: "{{ value_json.hub.attributes.speedc }}"

- platform: rest
  resource: !secret genie_resource
  method: GET
  name: Genie Kamergrootte
  value_template: "{{ value_json.hub.attributes.roomc }}"

- platform: template
  sensors:
    erik_status:
      value_template: '{{ states("input_select.erik_status_dropdown") }}'
      friendly_name: "Erik"
    nathalie_status:
      value_template: '{{ states("input_select.nathalie_status_dropdown") }}'
      friendly_name: "Nathalie"
    devices:
      friendly_name: personen thuis
      value_template: >-
        {% if is_state('person.erik', 'home') %}
          home
        {% else %}
          {% if is_state('person.nathalie', 'home') %}
            home
          {% else %}
            not_home
          {% endif %}
        {% endif %}

- platform: template
  sensors:
    lampen_aan:
      friendly_name: Aantal lampen aan
      value_template: >-
        {% for state in states
          if ( 'light' in state.entity_id 
                and state.domain in ['light','switch']
                and state.state == 'on' ) -%}
          {% if loop.last -%}
            {{ loop.index }}
          {%- endif %}
        {% else %}
          0
        {%- endfor %}

- platform: afvalinfo
  resources:
    - pbd
    - gft
    - papier
    - restafval
    - trash_type_today
  location: !secret afvalinfo_city
  postcode: !secret afvalinfo_postcode
  streetnumber: !secret afvalinfo_number
  dateformat: "%A %d %B"
  locale: "nl"
  timespanindays: 365

- platform: lastfm
  api_key: !secret lastfm
  users:
    - rikkie80

- platform: spotcast

- platform: folder
  folder: "www/video"

- platform: files
  folder: "www/video/woonkamer"
  name: woonkamer
  filter: woonkamer_*

- platform: files
  folder: "www/video/oprit"
  name: oprit
  filter: oprit_*

- platform: files
  folder: "www/video/deurbel"
  name: deurbel
  filter: deurbel_*

- platform: files
  folder: "www/video"
  name: gallery_images
  sort: date

- platform: template
  sensors:
    zonhoek:
      friendly_name: "zonhoek"
      unit_of_measurement: "°"
      value_template: "{{ state_attr('sun.sun', 'elevation') }}"

- platform: template
  sensors:
    azimuth:
      friendly_name: "Azimuth"
      unit_of_measurement: "°"
      value_template: "{{ state_attr('sun.sun', 'azimuth') }}"

- platform: time_date
  display_options:
    - "date"
    - "time"
    - "date_time"

#### PIR
- platform: template
  sensors:
    average_lux:
      friendly_name: Gemiddeld daglicht
      icon_template: mdi:brightness-6
      unit_of_measurement: Lux
      value_template: >-
        {% set value_woonkamer = float(states("sensor.notification_sensor_illuminance") | int) %}
        {% set value_beneden = float(states("sensor.hal_sensor_beneden_light_level") | int) %}
        {% set value_boven = float(states("sensor.hal_sensor_boven_light_level") | int) %}
        {{ ((value_woonkamer + value_boven + value_beneden)/3) | round(2) }}
    average_lux_xiaomi:
      friendly_name: Gemiddeld daglicht Xiaomi
      icon_template: mdi:brightness-6
      unit_of_measurement: Lux
      value_template: >-
        {% set value_woonkamer_voor = float(states("sensor.woonkamer_voor") | int) %}
        {% set value_keuken = float(states("sensor.bijkeuken") | int) %}
        {% set value_hal = float(states("sensor.hal") | int) %}
        {{ ((value_woonkamer_voor + value_keuken + value_hal)/3) | round(2) }}

################ Energy monitor switches
- platform: template
  sensors:
    droger_watts:
      friendly_name_template: '{{ state_attr("switch.droger", "friendly_name") }} Huidig Verbruik'
      value_template: '{{ state_attr("switch.droger", "current_power_w") | float }}'
      unit_of_measurement: "W"
    wasmachine_watts:
      friendly_name_template: '{{ state_attr("switch.wasmachine", "friendly_name") }} Huidig Verbruik'
      value_template: '{{ state_attr("switch.wasmachine", "current_power_w") | float }}'
      unit_of_measurement: "W"
    wasmachine_current:
      friendly_name: "Wasmachine Verbruik <4 Watt"
      value_template: >-
        {% if state_attr("switch.wasmachine", "current_power_w") | replace(" W", "") | float <4 %}
          Klaar
        {% else %}
          Draait
        {% endif %}
    droger_current:
      friendly_name: "Droger Verbruik <5 Watt"
      value_template: >-
        {% if state_attr("switch.droger", "current_power_w") | replace(" W", "") | float <5 %}
          Klaar
        {% else %}
          Draait
        {% endif %}

#### RSS Feedparser
- platform: feedparser
  name: ED Veldhoven
  feed_url: "https://www.ed.nl/veldhoven/rss.xml"
  date_format: "%a, %b %d %I:%M %p"
  inclusions:
    - title
    - link
    - description
    - media:thumbnail
    - pubDate
- platform: feedparser
  name: ED Binnenland
  feed_url: "https://www.ed.nl/binnenland/rss.xml"
  date_format: "%a, %b %d %I:%M %p"
  inclusions:
    - title
    - link
    - description
    - media:thumbnail
    - pubDate
- platform: feedparser
  name: ED PSV
  feed_url: "https://www.ed.nl/psv/rss.xml"
  date_format: "%a, %b %d %I:%M %p"
  inclusions:
    - title
    - link
    - description
    - media:thumbnail
    - pubDate
- platform: feedparser
  name: NU Algemeen nieuws
  feed_url: "https://www.nu.nl/rss/Algemeen"
  date_format: "%a, %b %d %I:%M %p"
  inclusions:
    - title
    - link
    - description
    - enclosure
    - pubDate
############################
#### sunlight ##############
############################
- platform: template
  sensors:
    sunlight_pct:
      #      entity_id:
      #        - sun.sun
      #        - sensor.weather_cloud_coverage
      value_template: >-
        {%- set elevation = state_attr('sun.sun','elevation') | float %}
        {%- set cloud_coverage = states('sensor.weather_cloud_coverage') | float %}
        {%- set cloud_factor = (1 - (0.75 * ( cloud_coverage / 100) ** 3 )) %}
        {%- set min_elevation = -6 %}
        {%- set max_elevation = 90 %}
        {%- set adjusted_elevation = elevation - min_elevation %}
        {%- set adjusted_elevation = [adjusted_elevation,0] | max %}
        {%- set adjusted_elevation = [adjusted_elevation,max_elevation - min_elevation] | min %}
        {%- set adjusted_elevation = adjusted_elevation / (max_elevation - min_elevation) %}
        {%- set adjusted_elevation = adjusted_elevation %}
        {%- set adjusted_elevation = adjusted_elevation * 100 %}
        {%- set brightness = adjusted_elevation * cloud_factor %}
        {{ brightness | round }}
      unit_of_measurement: "%"
      device_class: "illuminance"

##########################################################
## Printer information via SNMP
##########################################################

# Printer status

- platform: snmp
  name: "150nw_total_pages_printed"
  host: !secret printer_ip
  baseoid: 1.3.6.1.2.1.43.10.2.1.4.1.1
  accept_errors: true
  scan_interval: 60
  unit_of_measurement: "pagina's geprint"

- platform: snmp
  name: "150nw_color_pages_printed"
  host: !secret printer_ip
  baseoid: 1.3.6.1.4.1.11.2.3.9.4.2.1.4.1.2.7.0
  accept_errors: true
  scan_interval: 60
  unit_of_measurement: "kleurenpagina's geprint"

- platform: snmp
  name: "150nw_printer_status_code"
  host: !secret printer_ip
  baseoid: 1.3.6.1.2.1.25.3.5.1.1.1
  accept_errors: true
  scan_interval: 5

- platform: snmp
  name: "150nw_printer_error_code"
  host: !secret printer_ip
  baseoid: 1.3.6.1.4.1.11.2.3.9.4.2.1.4.1.2.22.0
  accept_errors: true
  scan_interval: 5

- platform: snmp
  name: "150nw_uptime"
  host: !secret printer_ip
  baseoid: 1.3.6.1.2.1.1.3.0
  accept_errors: true
  scan_interval: 1

- platform: template
  sensors:
    150nw_bw_pages_printed:
      friendly_name: "zwartwit pagina's geprint"
      unit_of_measurement: "zwartwit pagina's geprint"
      value_template: "{{ (states('sensor.150nw_total_pages_printed')|float - states('sensor.150nw_color_pages_printed')|float) | round(0) }}"

    150nw_printer_error:
      friendly_name: "Printer Error"
      value_template: >-
        {% if is_state('sensor.150nw_printer_error_code', '0') %}
          Papier bijna op
        {% elif is_state('sensor.150nw_printer_error_code', '1') %}
          Geen papier beschikbaar
        {% elif is_state('sensor.150nw_printer_error_code', '2') %}
          Toner bijna op
        {% elif is_state('sensor.150nw_printer_error_code', '3') %}
          Geen toner beschikbaar
        {% elif is_state('sensor.150nw_printer_error_code', '4') %}
          Een klep van de printer is open
        {% elif is_state('sensor.150nw_printer_error_code', '5') %}
          Er zit iets vast in de printer
        {% elif is_state('sensor.150nw_printer_error_code', '6') %}
          De printer is offline
        {% elif is_state('sensor.150nw_printer_error_code', '7') %}
          Technische service is benodigd voor de printer
        {% elif is_state('sensor.150nw_printer_error_code', '8') %}
          De input tray ontbreekt of is niet correct geinstalleerd
        {% elif is_state('sensor.150nw_printer_error_code', '9') %}
          De output tray ontbreekt of is niet correct geinstalleerd
        {% elif is_state('sensor.150nw_printer_error_code', '10') %}
          De marker supply ontbreekt of is niet correct geinstalleerd
        {% elif is_state('sensor.150nw_printer_error_code', '11') %}
          De output tray is bijna vol
        {% elif is_state('sensor.150nw_printer_error_code', '12') %}
          De output tray is vol
        {% elif is_state('sensor.150nw_printer_error_code', '13') %}
          De input tray is leeg
        {% elif is_state('sensor.150nw_printer_error_code', '14') %}
          De printer is overdue voor preventief onderhoud
        {% else %}  
          Onbekend
        {% endif %}

    150nw_printer_status:
      friendly_name: "Printer Status"
      value_template: >-
        {% if is_state('sensor.150nw_printer_status_code', '1') %}
          Overige
        {% elif is_state('sensor.150nw_printer_status_code', '2') %}
          Onbekend
        {% elif is_state('sensor.150nw_printer_status_code', '3') %}
          Standby
        {% elif is_state('sensor.150nw_printer_status_code', '4') %}
          Aan het printen
        {% elif is_state('sensor.150nw_printer_status_code', '5') %}
          Opwarmen
        {% else %}  
          Onbekend
        {% endif %}

    150nw_printer_uptime:
      friendly_name: "Printer Uptime"
      value_template: >-
        {% set t = states('sensor.150nw_uptime') | int %}
        {% set t = (t/10) | int %}
        {{ '{:d}d {:02d}h {:02d}m {:02d}s'.format(t // 86400, (t // 3600) % 24, (t % 3600) // 60, (t % 3600) % 60) }}

#############################
######### Energy ###########
#############################

# Verbruik naar W
- platform: template
  sensors:
    power_consumption_w:
      friendly_name: "Verbruik in W"
      value_template: "{{ (states('sensor.power_consumption') |float *1000) }}"
      unit_of_measurement: "W"

# Energieproductie naar W
- platform: template
  sensors:
    power_production_w:
      friendly_name: "Energieproductie in W"
      value_template: "{{ (states('sensor.power_production') |float *1000) }}"
      unit_of_measurement: "W"

# - platform: template
#   sensors:
#     daily_energy:
#       friendly_name: Daily Energy
#       unit_of_measurement: kWh
#       value_template: "{{ (states('sensor.daily_energy_offpeak')|float + states('sensor.daily_energy_peak')|float)|round(2) }}"
#     monthly_energy:
#       friendly_name: Monthly Energy
#       unit_of_measurement: kWh
#       value_template: "{{ (states('sensor.monthly_energy_offpeak')|float + states('sensor.monthly_energy_peak')|float)|round(2) }}"

- platform: template
  sensors:
    # DSMR METER READINGS #

    # CALCULATION TARIF LOW + NORMAL
    hourly_energy:
      friendly_name: Hourly energy
      unit_of_measurement: kWh
      value_template: "{{ states('sensor.hourly_energy_offpeak')|float + states('sensor.hourly_energy_peak')|float }}"
    daily_energy:
      friendly_name: Daily energy
      unit_of_measurement: kWh
      value_template: "{{ states('sensor.daily_energy_offpeak')|float + states('sensor.daily_energy_peak')|float }}"
    weekly_energy:
      friendly_name: Weekly energy
      unit_of_measurement: kWh
      value_template: "{{ states('sensor.weekly_energy_offpeak')|float + states('sensor.weekly_energy_peak')|float }}"
    monthly_energy:
      friendly_name: Monthly energy
      unit_of_measurement: kWh
      value_template: "{{ states('sensor.monthly_energy_offpeak')|float + states('sensor.monthly_energy_peak')|float }}"
    yearly_energy:
      friendly_name: Yearly energy
      unit_of_measurement: kWh
      value_template: "{{ states('sensor.yearly_energy_offpeak')|float + states('sensor.yearly_energy_peak')|float }}"
    # # LAST PERIODS GAS
    # yesterday_gas:
    #   friendly_name: Yesterday Gas
    #   unit_of_measurement: m3
    #   value_template: "{{ state_attr('sensor.daily_gas','last_period') }}"
    # last_week_gas:
    #   friendly_name: last Week Gas
    #   unit_of_measurement: m3
    #   value_template: "{{ state_attr('sensor.weekly_gas','last_period') }}"
    # last_month_gas:
    #   friendly_name: last Month Gas
    #   unit_of_measurement: m3
    #   value_template: "{{ state_attr('sensor.monthly_gas','last_period') }}"
    # last_year_gas:
    #   friendly_name: last Year Gas
    #   unit_of_measurement: m3
    #   value_template: "{{ state_attr('sensor.yearly_gas','last_period') }}"

    # LAST PERIODS energy
    yesterday_energy:
      friendly_name: Yesterday energy
      unit_of_measurement: kWh
      value_template: "{{ state_attr('sensor.daily_energy_offpeak','last_period')|float + state_attr('sensor.daily_energy_peak','last_period')|float }}"
    last_week_energy:
      friendly_name: Last Week energy
      unit_of_measurement: kWh
      value_template: "{{ state_attr('sensor.weekly_energy_offpeak','last_period')|float + state_attr('sensor.weekly_energy_peak','last_period')|float }}"
    last_month_energy:
      friendly_name: Last Month energy
      unit_of_measurement: kWh
      value_template: "{{ state_attr('sensor.monthly_energy_offpeak','last_period')|float + state_attr('sensor.monthly_energy_peak','last_period')|float }}"
    last_year_energy:
      friendly_name: Last Year energy
      unit_of_measurement: kWh
      value_template: "{{ state_attr('sensor.yearly_energy_offpeak','last_period')|float + state_attr('sensor.yearly_energy_peak','last_period')|float }}"

    # SHORT energy
    daily_energy_short:
      value_template: "{{ '%.3f'%(states('sensor.daily_energy') | float) | float }}"
      unit_of_measurement: "kWh"

    yesterday_energy_short:
      value_template: "{{ '%.3f'%(states('sensor.yesterday_energy') | float) | float }}"
      unit_of_measurement: "kWh"

    weekly_energy_short:
      value_template: "{{ '%.3f'%(states('sensor.weekly_energy') | float) | float }}"
      unit_of_measurement: "kWh"

    last_week_energy_short:
      value_template: "{{ '%.3f'%(states('sensor.last_week_energy') | float) | float }}"
      unit_of_measurement: "kWh"

    monthly_energy_short:
      value_template: "{{ '%.3f'%(states('sensor.monthly_energy') | float) | float }}"
      unit_of_measurement: "kWh"

    last_month_energy_short:
      value_template: "{{ '%.3f'%(states('sensor.last_month_energy') | float) | float }}"
      unit_of_measurement: "kWh"

    yearly_energy_short:
      value_template: "{{ '%.3f'%(states('sensor.yearly_energy') | float) | float }}"
      unit_of_measurement: "kWh"

    last_year_energy_short:
      value_template: "{{ '%.3f'%(states('sensor.last_year_energy') | float) | float }}"
      unit_of_measurement: "kWh"

    # CACULATIONS
    energy_kwh_to_watt:
      friendly_name: "Actueel Watt"
      unit_of_measurement: "Watt"
      value_template: "{{ (states('sensor.power_consumption_phase_l1') | float * 1000) | round(0) }}"
    # #Gemiddeld
    # average_gas_day:
    #   unit_of_measurement: 'm3'
    #   value_template: >-
    #     {% set a = states('sensor.last_month_gas') | float %}
    #     {{ (a / 30.41) | round(3) }}
    #Gemiddeld
    average_energy_day:
      unit_of_measurement: "kWh"
      value_template: >-
        {% set a = states('sensor.last_month_energy') | float %}
        {{ (a / 30.41) | round(3) }}

    # Greenchoice ENERGIE
    # PRICES GAS
    # today_gas_price:
    #   unit_of_measurement: 'EUR'
    #   value_template: >-
    #     {% set a = states('sensor.daily_gas') | float %}
    #     {% set b = states('input_number.all_in_enkeltarief_gas') | float %}
    #     {% set c = states('input_number.netbeheerkosten_gas') | float / 365 %}
    #     {% set d = states('input_number.vaste_leveringskosten_gas') | float / 365 %}
    #     {{ (((a * b) + c) + d) | round(2) }}

    # yesterday_gas_price:
    #   unit_of_measurement: 'EUR'
    #   value_template: >-
    #     {% set a = states('sensor.yesterday_gas') | float %}
    #     {% set b = states('input_number.all_in_enkeltarief_gas') | float %}
    #     {% set c = states('input_number.netbeheerkosten_gas') | float / 365 %}
    #     {% set d = states('input_number.vaste_leveringskosten_gas') | float / 365 %}
    #     {{ (((a * b) + c) + d) | round(2) }}

    # week_gas_price:
    #   unit_of_measurement: 'EUR'
    #   value_template: >-
    #     {% set a = states('sensor.weekly_gas') | float %}
    #     {% set b = states('input_number.all_in_enkeltarief_gas') | float %}
    #     {% set c = states('input_number.netbeheerkosten_gas') | float / 52 %}
    #     {% set d = states('input_number.vaste_leveringskosten_gas') | float / 52 %}
    #     {{ (((a * b) + c) + d) | round(2) }}

    # last_week_gas_price:
    #   unit_of_measurement: 'EUR'
    #   value_template: >-
    #     {% set a = states('sensor.last_week_gas') | float %}
    #     {% set b = states('input_number.all_in_enkeltarief_gas') | float %}
    #     {% set c = states('input_number.netbeheerkosten_gas') | float / 52 %}
    #     {% set d = states('input_number.vaste_leveringskosten_gas') | float / 52 %}
    #     {{ (((a * b) + c) + d) | round(2) }}

    # month_gas_price:
    #   unit_of_measurement: 'EUR'
    #   value_template: >-
    #     {% set a = states('sensor.monthly_gas') | float %}
    #     {% set b = states('input_number.all_in_enkeltarief_gas') | float %}
    #     {% set c = states('input_number.netbeheerkosten_gas') | float / 12 %}
    #     {% set d = states('input_number.vaste_leveringskosten_gas') | float / 12 %}
    #     {{ (((a * b) + c) + d) | round(2) }}

    # last_month_gas_price:
    #   unit_of_measurement: 'EUR'
    #   value_template: >-
    #     {% set a = states('sensor.last_month_gas') | float %}
    #     {% set b = states('input_number.all_in_enkeltarief_gas') | float %}
    #     {% set c = states('input_number.netbeheerkosten_gas') | float / 12 %}
    #     {% set d = states('input_number.vaste_leveringskosten_gas') | float / 12 %}
    #     {{ (((a * b) + c) + d) | round(2) }}

    # year_gas_price:
    #   unit_of_measurement: 'EUR'
    #   value_template: >-
    #     {% set a = states('sensor.yearly_gas') | float %}
    #     {% set b = states('input_number.all_in_enkeltarief_gas') | float %}
    #     {% set c = states('input_number.netbeheerkosten_gas') | float %}
    #     {% set d = states('input_number.vaste_leveringskosten_gas') | float %}
    #     {{ (((a * b) + c) + d) | round(2) }}

    # last_year_gas_price:
    #   unit_of_measurement: 'EUR'
    #   value_template: >-
    #     {% set a = states('sensor.last_year_gas') | float %}
    #     {% set b = states('input_number.all_in_enkeltarief_gas') | float %}
    #     {% set c = states('input_number.netbeheerkosten_gas') | float %}
    #     {% set d = states('input_number.vaste_leveringskosten_gas') | float %}
    #     {{ (((a * b) + c) + d) | round(2) }}

    # PRICES energy
    today_energy_price:
      unit_of_measurement: "EUR"
      value_template: >-
        {% set a = states('sensor.daily_energy') | float %}
        {% set b = states('input_number.all_in_enkeltarief_stroom') | float %}
        {% set c = states('input_number.netbeheerkosten_stroom') | float / 365 %}
        {% set d = states('input_number.vaste_leveringskosten_stroom') | float / 365 %}
        {% set e = states('input_number.vermindering_energiebelasting_stroom') | float / 365 %}
        {{ ((((a * b) + c) + d) + e) | round(2) }}

    yesterday_energy_price:
      unit_of_measurement: "EUR"
      value_template: >-
        {% set a = states('sensor.yesterday_energy') | float %}
        {% set b = states('input_number.all_in_enkeltarief_stroom') | float %}
        {% set c = states('input_number.netbeheerkosten_stroom') | float / 365 %}
        {% set d = states('input_number.vaste_leveringskosten_stroom') | float / 365 %}
        {% set e = states('input_number.vermindering_energiebelasting_stroom') | float / 365 %}
        {{ ((((a * b) + c) + d) + e) | round(2) }}

    week_energy_price:
      unit_of_measurement: "EUR"
      value_template: >-
        {% set a = states('sensor.weekly_energy') | float %}
        {% set b = states('input_number.all_in_enkeltarief_stroom') | float %}
        {% set c = states('input_number.netbeheerkosten_stroom') | float / 52 %}
        {% set d = states('input_number.vaste_leveringskosten_stroom') | float / 52 %}
        {% set e = states('input_number.vermindering_energiebelasting_stroom') | float / 52 %}
        {{ ((((a * b) + c) + d) + e) | round(2) }}

    last_week_energy_price:
      unit_of_measurement: "EUR"
      value_template: >-
        {% set a = states('sensor.last_week_energy') | float %}
        {% set b = states('input_number.all_in_enkeltarief_stroom') | float %}
        {% set c = states('input_number.netbeheerkosten_stroom') | float / 52 %}
        {% set d = states('input_number.vaste_leveringskosten_stroom') | float / 52 %}
        {% set e = states('input_number.vermindering_energiebelasting_stroom') | float / 52 %}
        {{ ((((a * b) + c) + d) + e) | round(2) }}

    month_energy_price:
      unit_of_measurement: "EUR"
      value_template: >-
        {% set a = states('sensor.monthly_energy') | float %}
        {% set b = states('input_number.all_in_enkeltarief_stroom') | float %}
        {% set c = states('input_number.netbeheerkosten_stroom') | float / 12 %}
        {% set d = states('input_number.vaste_leveringskosten_stroom') | float / 12 %}
        {% set e = states('input_number.vermindering_energiebelasting_stroom') | float / 12 %}
        {{ ((((a * b) + c) + d) + e) | round(2) }}

    last_month_energy_price:
      unit_of_measurement: "EUR"
      value_template: >-
        {% set a = states('sensor.last_month_energy') | float %}
        {% set b = states('input_number.all_in_enkeltarief_stroom') | float %}
        {% set c = states('input_number.netbeheerkosten_stroom') | float / 12 %}
        {% set d = states('input_number.vaste_leveringskosten_stroom') | float / 12 %}
        {% set e = states('input_number.vermindering_energiebelasting_stroom') | float / 12 %}
        {{ ((((a * b) + c) + d) + e) | round(2) }}

    year_energy_price:
      unit_of_measurement: "EUR"
      value_template: >-
        {% set a = states('sensor.yearly_energy') | float %}
        {% set b = states('input_number.all_in_enkeltarief_stroom') | float %}
        {% set c = states('input_number.netbeheerkosten_stroom') | float %}
        {% set d = states('input_number.vaste_leveringskosten_stroom') | float %}
        {% set e = states('input_number.vermindering_energiebelasting_stroom') | float %}
        {{ ((((a * b) + c) + d) + e) | round(2) }}

    last_year_energy_price:
      unit_of_measurement: "EUR"
      value_template: >-
        {% set a = states('sensor.last_year_energy') | float %}
        {% set b = states('input_number.all_in_enkeltarief_stroom') | float %}
        {% set c = states('input_number.netbeheerkosten_stroom') | float %}
        {% set d = states('input_number.vaste_leveringskosten_stroom') | float %}
        {% set e = states('input_number.vermindering_energiebelasting_stroom') | float %}
        {{ ((((a * b) + c) + d) + e) | round(2) }}

#################################
########## Watermeter ############
##################################

- platform: template
  sensors:
    water_meterstand:
      friendly_name: Watermeter stand
      unit_of_measurement: m3
      value_template: |
        {% set water = ((states('sensor.water_meter_usage')|float + 391908)/1000) %}
        {% if water <= 999999 %}
          {{ ((states('sensor.water_meter_usage')|float + 391908)/1000)|round(3) }}
        {% else %}
          {{ (states('sensor.water_meter_usage')|float/1000)|round(3) }}
        {% endif %}

- platform: statistics
  name: watermeter_statistic
  entity_id: sensor.water_meter_usage
  max_age:
    minutes: 5

##################################
####### Pollen ###################
##################################
#sensor 
#===============================================================
# Ambee Pollen vertaald door huizebruin.nl en Roel R
# versie v01.07 14-05-2021 (alles uitgebreid in je dashboard) door huizebruin en Roel R
# versie v01.08 14-05-2021 (less is more display + nog een paar wijzigingen ) door huizebruin en Roel R
# Bron van deze file https://github.com/huizebruin/Home-Assistant-Config/
# https://api-dashboard.getambee.com/#/signup account aanmaken voor een 100 api calls per dag..
# Al het goed is is de zone voor home al ingesteld in je home assistant.
# vervang API-KEY door uw waarden  
# in je Secrets.yaml de volgende regels plaatsen: 
# (zonder hekje ervoor)     ambee-api: XXXXXXXXX
# Bron : https://gist.github.com/michilehr/7ce7431f97e82523336a120b50d0ebe2

- platform: rest
  name: pollen_data
  scan_interval: 3600
  resource_template: https://api.ambeedata.com/latest/pollen/by-lat-lng?lat={{ state_attr("zone.home", "latitude") }}&lng={{ state_attr("zone.home", "longitude") }}
  value_template: >-
    {{ value_json.message}}
  headers:
    content-type: application/json
    x-api-key: !secret ambee-api
  json_attributes_path: data[0]
  json_attributes:
    - Count
    - Risk
    - Species
    - updatedAt

- platform: template
  sensors:
    pollen_bomen:
      friendly_name: Bomen
      icon_template: mdi:tree
      value_template: >-
        {% set state = state_attr("sensor.pollen_data", "Risk").tree_pollen %}
        {% if state == "Low" %} Weinig
        {% elif state == "Moderate"%} Matig
        {% elif state == "High"%} Hoog
        {% elif state == "Very High"%} Zeer hoog
        {% else %}Onbekend{% endif %}
      attribute_templates:
        Totaal: >-
          {{ state_attr("sensor.pollen_data", "Count").tree_pollen }} /m³
        Els: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Alder }} /m³
        Berk: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Birch }} /m³
        Coniferen: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Cypress }} /m³
        Iep: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Elm }} /m³
        Hazelaar: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Hazel }} /m³
        Eik: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Oak }} /m³
        Den: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Pine }} /m³
        Plataan: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Plane }} /m³
        Populier: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree["Poplar / Cottonwood"] }} /m³

    pollen_grassen:
      friendly_name: Grassen
      icon_template: mdi:grass
      value_template: >-
        {% set state = state_attr("sensor.pollen_data", "Risk").grass_pollen %}
        {% if state == "Low" %} Weinig
        {% elif state == "Moderate"%} Matig
        {% elif state == "High"%} Hoog
        {% elif state == "Very High"%} Zeer hoog
        {% else %}Onbekend{% endif %}
      attribute_templates:
        Totaal: >-
          {{ state_attr("sensor.pollen_data", "Count").grass_pollen }} /m³
        Gramineae: >-
          {{ state_attr("sensor.pollen_data", "Species").Grass["Grass / Poaceae"] }} /m³

    pollen_onkruiden:
      friendly_name: Onkruiden
      icon_template: mdi:grass
      value_template: >-
        {% set state = state_attr("sensor.pollen_data", "Risk").weed_pollen %}
        {% if state == "Low" %} Weinig
        {% elif state == "Moderate"%} Matig
        {% elif state == "High"%} Hoog
        {% elif state == "Very High"%} Zeer hoog
        {% else %}Onbekend{% endif %}
      attribute_templates:
        Totaal: >-
          {{ state_attr("sensor.pollen_data", "Count").weed_pollen }} /m³
        Amaranten/Ganzenvoet: >-
          {{ state_attr("sensor.pollen_data", "Species").Weed.Chenopod }} /m³
        Bijvoet: >-
          {{ state_attr("sensor.pollen_data", "Species").Weed.Mugwort }} /m³
        Brandnetel: >-
          {{ state_attr("sensor.pollen_data", "Species").Weed.Nettle }} /m³
        Ambrosia: >-
          {{ state_attr("sensor.pollen_data", "Species").Weed.Ragweed }} /m³

    pollen_tree_count:
      icon_template: mdi:tree-outline
      friendly_name: "Bomen"
      unit_of_measurement: " /m³"
      value_template: '{{ state_attr("sensor.pollen_data", "Count").tree_pollen }}'

    pollen_weed_count:
      icon_template: mdi:grass
      friendly_name: "Onkruid"
      unit_of_measurement: " /m³"
      value_template: '{{ state_attr("sensor.pollen_data", "Count").weed_pollen }}'
      
    pollen_grass_count:
      icon_template: mdi:grass
      friendly_name: "Gras"
      unit_of_measurement: " /m³"
      value_template: '{{ state_attr("sensor.pollen_data", "Count").grass_pollen }}'
  
    pollen_last_updated:
      icon_template: "mdi:clock"
      friendly_name: "Laatste update"
      device_class: timestamp
      value_template: >-
        {% set date = state_attr('sensor.pollen_data', 'updatedAt')[0:10] %}
        {% set datet = state_attr('sensor.pollen_data', 'updatedAt')[11:19] %}
        {{ date + " " + datet }}